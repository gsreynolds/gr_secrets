<%
ENV["REGION"] ||= "eu-west-1"
ENV["VAULTNAME"] ||= "#{ENV['USER']}-vault"
ENV["LOCATION"] ||= "northeurope"
ENV["RGNAME"] ||= "kitchen-#{ENV['USER']}-secrets"
ENV["SPN_NAME"] ||= ENV['USER']
%>
---
driver:
  name: vagrant

provisioner:
  name: chef_zero

  ## product_name and product_version specifies a specific Chef product and version to install.
  ## see the Chef documentation for more details: https://docs.chef.io/config_yml_kitchen.html
  product_name: chef
  product_version: 15.6.10
  encrypted_data_bag_secret_key_path: 'encrypted_data_bag_secret'

verifier:
  name: inspec

transport:
  ssh_key: <%= ENV["SSH_KEY"] %>

platforms:
  - name: azure-ubuntu-18.04
    driver:
      name: azurerm
      explicit_resource_group_name: kitchen-<%= ENV['USER'] %>-secrets
      vm_tags:
        X-Contact: <%= ENV['USER'] %>
        X-Application: "Test-Kitchen"
        X-Customer: "Test-Kitchen"
        X-Project: "Test-Kitchen"
        X-TTL: "4"
        ostype: linux
        distro: ubuntu
      subscription_id: <%= ENV["AZURE_SUBSCRIPTION_ID"] %>
      location: 'North Europe'
      machine_size: 'Standard_D2s_v3'
      image_urn: Canonical:UbuntuServer:18.04-LTS:latest
      system_assigned_identity: true
      # user_assigned_identities:
      #   - <%= `az identity show --name $VAULTNAME-identity --resource-group $RGNAME| jq -r '.id'` %>
  - name: aws-ubuntu-18.04
    driver:
      name: ec2
      region: eu-west-1
      instance_type: t2.xlarge
      shared_credentials_profile: <%= ENV['AWS_PROFILE'] %>
      iam_profile_name: sm-access-profile
      tags:
        X-Contact: <%= ENV['USER'] %>
        X-Application: "Test-Kitchen"
        X-Customer: "Test-Kitchen"
        X-Project: "Test-Kitchen"
        X-TTL: '4'
suites:
  - name: keyvault
    includes:
      - azure-ubuntu-18.04
    provisioner:
      named_run_list: azure
    attributes:
      secrets_test:
        vault: <%= ENV["VAULTNAME"] %>
    driver:
      vm_name: xenial-vm
    lifecycle:
      pre_create:
        - echo <%= ENV["RGNAME"] %>
        - echo <%= ENV["LOCATION"] %>
        - echo <%= ENV["VAULTNAME"] %>
        # Pre-create the resource group
        - az group create -n <%= ENV["RGNAME"] %> -l <%= ENV["LOCATION"] %>
        # Create a key vault and create a secret in the vault
        - az provider register -n Microsoft.KeyVault
        - az keyvault create --name <%= ENV["VAULTNAME"] %> --resource-group <%= ENV["RGNAME"] %> --location <%= ENV["LOCATION"] %>
        - az keyvault secret set --vault-name <%= ENV["VAULTNAME"] %> --name "test-secret" --value "test1234"
        # Create a user-assigned managed identity
        - az identity create -g <%= ENV["RGNAME"] %> -n <%= ENV["VAULTNAME"] %>-identity
        # Grant the user-assigned managed identity access to the vault
        - az keyvault set-policy --name <%= ENV["VAULTNAME"] %> --resource-group <%= ENV["RGNAME"] %> --secret-permissions get list --object-id $(az identity show --name <%= ENV["VAULTNAME"] %>-identity --resource-group <%= ENV["RGNAME"] %> | jq -r '.principalId')
        # Grant the specified SPN access to the vault
        - az keyvault set-policy --name <%= ENV["VAULTNAME"] %> --resource-group <%= ENV["RGNAME"] %> --secret-permissions get list --object-id $(az ad sp list --display-name "<%= ENV["SPN_NAME"] %>" | jq -r '. | first | .objectId')
      post_create:
        # Add the user-assigned managed identity to the VM
        - az vm identity assign -g <%= ENV["RGNAME"] %> -n xenial-vm --identities $(az identity show --name <%= ENV["VAULTNAME"] %>-identity --resource-group <%= ENV["RGNAME"] %> | jq -r '.id')
        # Grant the VM system-assigned managed identity access to the vault
        - az keyvault set-policy --name <%= ENV["VAULTNAME"] %> --resource-group <%= ENV["RGNAME"] %> --secret-permissions get list --object-id $(az vm identity show -g <%= ENV["RGNAME"] %> -n xenial-vm | jq -r '.principalId')
    verifier:
      inspec_tests:
        - test/integration/default

  - name: secretsmanager
    includes:
      - aws-ubuntu-18.04
    provisioner:
      named_run_list: aws
    attributes:
      secrets_test:
        region: <%= ENV["REGION"] %>
    lifecycle:
      pre_create:
      - echo <%= ENV["REGION"] %>
      - aws secretsmanager create-secret --region <%= ENV["REGION"] %> --name test-secret --secret-string test1234
      - aws iam create-role --role-name secrets_role --assume-role-policy-document file://ec2-role-trust-policy.json
      - aws iam put-role-policy --role-name secrets_role --policy-name SM-Permissions --policy-document file://ec2-role-access-policy.json
      - aws iam create-instance-profile --instance-profile-name sm-access-profile
      - aws iam add-role-to-instance-profile --instance-profile-name sm-access-profile --role-name secrets_role
      # - sleep 10
      post_create:
      - remote: sudo apt update && sudo apt install -y build-essential
      post_destroy:
      - aws secretsmanager delete-secret --region <%= ENV["REGION"] %> --secret-id test-secret --force-delete-without-recovery
      - aws iam delete-role-policy --role-name secrets_role --policy-name SM-Permissions
      - aws iam remove-role-from-instance-profile --instance-profile-name sm-access-profile --role-name secrets_role
      - aws iam delete-instance-profile --instance-profile-name sm-access-profile
      - aws iam delete-role --role-name secrets_role
      # - sleep 10
    verifier:
      inspec_tests:
        - test/integration/default
